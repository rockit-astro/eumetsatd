#!/usr/bin/env python3.6
#
# This file is part of eumetsatd.
#
# eumetsatd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# eumetsatd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with eumetsatd.  If not, see <http://www.gnu.org/licenses/>.

"""Creates IR and dust maps for the web dashboard and estimates the IR opacity from EUMETSAT images"""

import datetime
from io import BytesIO
import re
import sys
import threading
import time
import traceback
import numpy as np
from PIL import Image
import Pyro4
import requests
from warwick.observatory.common import daemons

# pylint: disable=broad-except
# pylint: disable=too-few-public-methods

# Set automatically when generating RPM package
SOFTWARE_VERSION = 'UNKNOWN'

SOURCE_OUTPUT_FORMAT = '/srv/dashboard/generated/eumetsat-{0}.jpg'
SOURCE_URL_FORMAT = 'https://eumetview.eumetsat.int/static-images/MSG/{0}/WESTERNAFRICA/'
SOURCES = {
    'ir': 'IMAGERY/IR108/BW',
    'dust': 'RGB/DUST'
}

IMAGE_QUERY_TIMEOUT = 5
LOOP_DELAY = 300


def scrape_latest_image(category):
    """
    Scrapes the EUMETSAT website to find the URL and date for the latest image
        :param category: path component describing the requested image, e.g. IMAGERY/IR108/BW
        :return: dictionary containing keys for 'date' and 'url' or None on error
    """
    try:
        source_url = SOURCE_URL_FORMAT.format(category)
        r = requests.get(source_url, timeout=IMAGE_QUERY_TIMEOUT)
        if r.status_code != 200:
            print('Failed to scrape data for {0} (HTTP {1})'.format(category, r.status_code))
            return None

        id_search = re.search(r'array_nom_imagen\[0\]="(\w*)"', r.text)
        label_search = re.search(r'\<option value="0"\>(.*)\<\/option\>', r.text)

        if not id_search:
            print('Failed to extract image id from html')
            return None

        if not label_search:
            print('Failed to extract image label from html')
            return None

        try:
            date = datetime.datetime.strptime(label_search.group(1), "%d/%m/%y %H:%M UTC")
        except ValueError:
            print('Failed to parse `{0}` as a date'.format(label_search.group(1)))
            return None

        return {
            'url': source_url + 'IMAGESDisplay/' + id_search.group(1),
            'date': date
        }
    except Exception:
        print('Failed to scrape image data with exception:')
        traceback.print_exc(file=sys.stdout)
        return None


def fetch_and_crop_image(image_url):
    """
    Download the given EUMETSAT WESTERNAFRICA image and crop to focus on the Canary Islands
        :param image_url: Image URL to download
        :return PIL Image or None on error
    """
    try:
        r = requests.get(image_url, timeout=IMAGE_QUERY_TIMEOUT)
        if r.status_code != 200:
            print('Failed to fetch image `{0}` (HTTP {1})'.format(image_url, r.status_code))
            return None

        source = Image.open(BytesIO(r.content))

        # Cropy to the top-left corner containing the Canary Islands
        cropped = source.crop((0, 0, 800, 650))

        # Copy EUMETSAT watermark and metadata to bottom of cropped image
        cropped.paste(source.crop((0, 1108, 260, 1148)), (0, 610, 260, 650))
        cropped.paste(source.crop((908, 1108, 1448, 1148)), (260, 610, 800, 650))

        return cropped
    except Exception:
        print('Failed to fetch image `{0}` with exception:'.format(image_url))
        traceback.print_exc(file=sys.stdout)
        return None


def estimate_opacity(cropped_image):
    """
    Estimate the IR opacity in the area near La Palma
    :param cropped_image: PIL Image returned by fetch_and_crop_image
    :return: value between 0-100 percent or -1 on error
    """
    try:
        measurement_image = np.array(cropped_image.crop((313, 270, 343, 300)).convert('L'))

        # Mask out the island border annotations
        valid = np.ones((30, 30), dtype=bool)
        valid[9, 14:19] = False
        valid[10, 12:14] = False
        valid[11, 12] = False
        valid[12, 11] = False
        valid[13:16, 12] = False
        valid[16:20, 13] = False
        valid[20, 14:16] = False
        valid[19, 16] = False
        valid[17:19, 17] = False
        valid[15:17, 18] = False
        valid[10:15, 19] = False

        return round(np.median(measurement_image[valid]) / 2.55)
    except Exception:
        print('Failed to estimate opacity with exception:')
        traceback.print_exc(file=sys.stdout)
        return -1


class EumetsatDaemon:
    """Estimates the IR opacity from the Eumetsat image published by sat24.com"""

    def __init__(self):
        self._lock = threading.Lock()

        self._opacity = 0
        self._opacity_date = datetime.datetime.min
        self._last_source_update = {s: datetime.datetime.min for s in SOURCES}

        runloop = threading.Thread(target=self.__poll_data)
        runloop.daemon = True
        runloop.start()

    def __poll_data(self):
        """Main run loop"""
        while True:
            for s in SOURCES:
                latest = scrape_latest_image(SOURCES[s])
                if not latest or latest['date'] <= self._last_source_update[s]:
                    continue

                image = fetch_and_crop_image(latest['url'])
                if not image:
                    continue

                image.save(SOURCE_OUTPUT_FORMAT.format(s), 'JPEG', quality=80,
                           optimize=True, progressive=True, clobber=True)
                self._last_source_update[s] = latest['date']

                if s == 'ir':
                    opacity = estimate_opacity(image)
                    if opacity >= 0:
                        with self._lock:
                            self._opacity = opacity
                            self._opacity_date = latest['date']

            time.sleep(LOOP_DELAY)

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement. May return None if no data is available"""
        with self._lock:
            return {
                'date': self._opacity_date.strftime('%Y-%m-%dT%H:%M:%SZ'),
                'opacity': self._opacity,
                'software_version': SOFTWARE_VERSION
            }


if __name__ == '__main__':
    daemons.eumetsat_opacity.launch(EumetsatDaemon())
